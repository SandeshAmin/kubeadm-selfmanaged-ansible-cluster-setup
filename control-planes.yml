---
- name: Initialize Kubernetes Cluster
  hosts: control_plane
  become: yes
  tasks:
    - name: Run kubeadm init
      shell: kubeadm init --control-plane-endpoint={{ cp_endpoint }} --kubernetes-version={{ k8s_version }} --node-name={{ inventory_hostname }} --pod-network-cidr={{ pod_network_cidr }} --service-cidr={{ service_cidr }} --cri-socket={{ cri_socket }} --skip-phases=addon/kube-proxy --ignore-preflight-errors=FileContent--proc-sys-net-bridge-bridge-nf-call-iptables --v=9 >> kubeadm_init.txt
      args:
        chdir: $HOME
      async: 3600
      poll: 0
      register: kubeadm_init_result

    - name: Wait for kubeadm to complete
      async_status:
        jid: "{{ kubeadm_init_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 60
      delay: 10

    - name: create .kube directory
      become: yes
      become_user: ubuntu
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: Copy kubeconfig to user's home directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
      when: job_result.finished

    - name: Set kubeconfig permissions
      become: yes
      become_user: ubuntu
      command: chmod 600 /home/ubuntu/.kube/config
      when: job_result.finished

    - name: Download kubeconfig to local machine
      fetch:
        src: /home/ubuntu/.kube/config
        dest: $HOME/kube-cluster
        flat: yes
      delegate_to: control1


- import_playbook: reset.yml

- hosts: control1
  become: yes
  become_user: root
  user: ubuntu
  tasks:
    - name: restart services
      systemd:
        name: "{{ item }}"
        daemon_reload: yes
        enabled: yes
        state: restarted
      ignore_errors: true
      loop:
        - crio
        - containerd
        - docker
        - cri-docker

    - name: initialize the node
      shell: kubeadm init --control-plane-endpoint={{ cp_endpoint }} --kubernetes-version={{ k8s_version }} --node-name={{ inventory_hostname }} --pod-network-cidr={{ pod_network_cidr }} --service-cidr={{ service_cidr }} --cri-socket={{ cri_socket }}   --skip-phases=addon/kube-proxy   --ignore-preflight-errors=FileContent--proc-sys-net-bridge-bridge-nf-call-iptables --v=9 >> kubeadm_init.txt
      args:
        chdir: $HOME

    - name: create .kube directory
      become: yes
      become_user: ubuntu
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        owner: ubuntu
        mode: 0600
        remote_src: yes

    - name: wait for control-plane port 6443
      wait_for:
        host: 167.71.236.224
        port: 6443
        delay: 1
        connect_timeout: 60
        timeout: 300

    - name: upload certs
      become: yes
      become_user: ubuntu
      shell: sudo kubeadm init phase upload-certs --upload-certs --v=5
      register: certificate_key_raw

    - name: set certificate key
      become: yes
      become_user: ubuntu
      set_fact:
        certificate_key: "{{ certificate_key_raw.stdout_lines[2] }}"

    - name: get join command
      become: yes
      become_user: ubuntu
      shell: kubeadm token create --print-join-command --v=5
      register: join_command_raw

    - name: set join command
      become: yes
      become_user: ubuntu
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"

    - debug: msg="{{ hostvars['control1'].join_command }} --node-name={{ inventory_hostname }} --cri-socket={{ pod_network_cidr }} --certificate-key={{ hostvars['control1'].certificate_key }} --control-plane --ignore-preflight-errors=all --v=5 > kubeadm_cp_join.txt"

- hosts: control_plane
  become: yes
  become_user: root
  user: ubuntu
  tasks:
    - name: join cluster
      shell: "{{ hostvars['control1'].join_command }} --node-name={{ inventory_hostname }} --cri-socket={{ cri_socket }} --certificate-key={{ hostvars['control1'].certificate_key }} --control-plane --ignore-preflight-errors=all --v=5 > kubeadm_cp_join.txt"
      args:
        chdir: $HOME
      when: inventory_hostname != "control1"

    - name: create .kube directory
      become: yes
      become_user: ubuntu
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755
      when: inventory_hostname != "control1"

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        owner: ubuntu
        mode: 0600
        remote_src: yes
      when: inventory_hostname != "control1"

    - name: remove taint on control-plane
      become: yes
      become_user: ubuntu
      shell: kubectl taint nodes --overwrite --all node-role.kubernetes.io/master- node-role.kubernetes.io/control-plane-
      ignore_errors: true

    - name: restart kubelet
      systemd:
        name: kubelet
        daemon_reload: yes
        enabled: yes
        state: restarted
      ignore_errors: true

    - name: restart containerd
      systemd:
        name: containerd
        daemon_reload: yes
        enabled: yes
        state: restarted
      ignore_errors: true